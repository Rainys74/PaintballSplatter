#include "InputData.h"

#define CASE(x, y) case x:\
					   return y;\
					   break;

int Engine::WinKeyToInputSystem(WPARAM key)
{
	switch (key)
	{
		default:
			return PS_KEY_NULL;
			break;

		CASE('A', PS_KEY_A);
		CASE('B', PS_KEY_B);
		CASE('C', PS_KEY_C);
		CASE('D', PS_KEY_D);
		CASE('E', PS_KEY_E);
		CASE('F', PS_KEY_F);
		CASE('G', PS_KEY_G);
		CASE('H', PS_KEY_H);
		CASE('I', PS_KEY_I);
		CASE('J', PS_KEY_J);
		CASE('K', PS_KEY_K);
		CASE('L', PS_KEY_L);
		CASE('M', PS_KEY_M);
		CASE('N', PS_KEY_N);
		CASE('O', PS_KEY_O);
		CASE('P', PS_KEY_P);
		CASE('Q', PS_KEY_Q);
		CASE('R', PS_KEY_R);
		CASE('S', PS_KEY_S);
		CASE('T', PS_KEY_T);
		CASE('U', PS_KEY_U);
		CASE('V', PS_KEY_V);
		CASE('W', PS_KEY_W);
		CASE('X', PS_KEY_X);
		CASE('Y', PS_KEY_Y);
		CASE('Z', PS_KEY_Z);

		CASE('0', PS_KEY_ALPHA0);
		CASE('1', PS_KEY_ALPHA1);
		CASE('2', PS_KEY_ALPHA2);
		CASE('3', PS_KEY_ALPHA3);
		CASE('4', PS_KEY_ALPHA4);
		CASE('5', PS_KEY_ALPHA5);
		CASE('6', PS_KEY_ALPHA6);
		CASE('7', PS_KEY_ALPHA7);
		CASE('8', PS_KEY_ALPHA8);
		CASE('9', PS_KEY_ALPHA9);

		CASE(192, PS_KEY_BACKQUOTE);
		CASE(189, PS_KEY_ALPHAMINUS);
		CASE(187, PS_KEY_ALPHAEQUAL);
		CASE(220, PS_KEY_BACKSLASH);
		CASE(191, PS_KEY_SLASH);
		CASE(219, PS_KEY_LEFTBRACKET);
		CASE(221, PS_KEY_RIGHTBRACKET);
		CASE(186, PS_KEY_SEMICOLON);
		CASE(222, PS_KEY_APOSTROPHE);
		CASE(188, PS_KEY_COMMA);
		CASE(190, PS_KEY_PERIOD);

		CASE(VK_BACK,		PS_KEY_BACKSPACE);
		CASE(VK_TAB,		PS_KEY_TAB);
		CASE(VK_RETURN,		PS_KEY_RETURN);
		CASE(VK_SHIFT,		PS_KEY_LSHIFT);
		CASE(VK_LSHIFT,		PS_KEY_LSHIFT);
		CASE(VK_RSHIFT,		PS_KEY_RSHIFT);
		CASE(VK_CONTROL,	PS_KEY_CTRL);		// TODO: differentiate left control and right control
		CASE(VK_LCONTROL,	PS_KEY_LCTRL);
		CASE(VK_RCONTROL,	PS_KEY_RCTRL);
		CASE(VK_MENU,		PS_KEY_LALT);
		CASE(VK_LMENU,		PS_KEY_LALT);
		CASE(VK_RMENU,		PS_KEY_RALT);
		CASE(VK_PAUSE,		PS_KEY_PAUSE);
		CASE(VK_CAPITAL,	PS_KEY_CAPSLOCK);
		CASE(VK_ESCAPE,		PS_KEY_ESCAPE);
		CASE(VK_SPACE,		PS_KEY_SPACE);
		CASE(VK_PRIOR,		PS_KEY_PGUP);
		CASE(VK_NEXT,		PS_KEY_PGDN);
		CASE(VK_END,		PS_KEY_END);
		CASE(VK_HOME,		PS_KEY_HOME);
		CASE(VK_LEFT,		PS_KEY_LEFT);
		CASE(VK_UP,			PS_KEY_UP);
		CASE(VK_RIGHT,		PS_KEY_RIGHT);
		CASE(VK_DOWN,		PS_KEY_DOWN);
		CASE(VK_SNAPSHOT,	PS_KEY_PRTSC);
		CASE(VK_INSERT,		PS_KEY_INSERT);
		CASE(VK_DELETE,		PS_KEY_DELETE);
		CASE(VK_LWIN,		PS_KEY_START);		// TODO: decide if you want this
		CASE(VK_RWIN,		PS_KEY_START);
		CASE(VK_APPS,		PS_KEY_APPS);
		CASE(VK_SLEEP,		PS_KEY_NULL);
		CASE(VK_NUMPAD0,	PS_KEY_NUMPAD0);
		CASE(VK_NUMPAD1,	PS_KEY_NUMPAD1);
		CASE(VK_NUMPAD2,	PS_KEY_NUMPAD2);
		CASE(VK_NUMPAD3,	PS_KEY_NUMPAD3);
		CASE(VK_NUMPAD4,	PS_KEY_NUMPAD4);
		CASE(VK_NUMPAD5,	PS_KEY_NUMPAD5);
		CASE(VK_NUMPAD6,	PS_KEY_NUMPAD6);
		CASE(VK_NUMPAD7,	PS_KEY_NUMPAD7);
		CASE(VK_NUMPAD8,	PS_KEY_NUMPAD8);
		CASE(VK_NUMPAD9,	PS_KEY_NUMPAD9);
		CASE(VK_MULTIPLY,	PS_KEY_MULTIPLY);
		CASE(VK_ADD,		PS_KEY_ADD);
		CASE(VK_SUBTRACT,	PS_KEY_SUBTRACT);
		CASE(VK_DECIMAL,	PS_KEY_DECIMAL);
		CASE(VK_DIVIDE,		PS_KEY_DIVIDE);
		CASE(VK_F1,			PS_KEY_F1);
		CASE(VK_F2,			PS_KEY_F2);
		CASE(VK_F3,			PS_KEY_F3);
		CASE(VK_F4,			PS_KEY_F4);
		CASE(VK_F5,			PS_KEY_F5);
		CASE(VK_F6,			PS_KEY_F6);
		CASE(VK_F7,			PS_KEY_F7);
		CASE(VK_F8,			PS_KEY_F8);
		CASE(VK_F9,			PS_KEY_F9);
		CASE(VK_F10,		PS_KEY_F10);
		CASE(VK_F11,		PS_KEY_F11);
		CASE(VK_F12,		PS_KEY_F12);		// TODO: decide if you want 24 function keys
		CASE(VK_NUMLOCK,	PS_KEY_NUMLOCK);
		CASE(VK_SCROLL,		PS_KEY_SCRLK);
	}
	return PS_KEY_NULL;
}

int Engine::WinMouseToInputSystem(WPARAM button)
{
	switch (button)
	{
		default:
			return PS_MOUSE_NULL;
			break;

		CASE('A', PS_MOUSE_LBUTTON);
	}
	return PS_MOUSE_NULL;
}

#ifdef PS_DEBUG
#include "logger.h"
#include <map>

void PrintInputNumberToName(int number)
{
	// Create a map to associate names with values
	std::map<int, std::string> keyMap;
#define MAP_KEY(x) keyMap[x] = #x
	MAP_KEY(PS_KEY_NULL);
	MAP_KEY(PS_KEY_A);
	MAP_KEY(PS_KEY_B);
	MAP_KEY(PS_KEY_C);
	MAP_KEY(PS_KEY_D);
	MAP_KEY(PS_KEY_E);
	MAP_KEY(PS_KEY_F);
	MAP_KEY(PS_KEY_G);
	MAP_KEY(PS_KEY_H);
	MAP_KEY(PS_KEY_I);
	MAP_KEY(PS_KEY_J);
	MAP_KEY(PS_KEY_K);
	MAP_KEY(PS_KEY_L);
	MAP_KEY(PS_KEY_M);
	MAP_KEY(PS_KEY_N);
	MAP_KEY(PS_KEY_O);
	MAP_KEY(PS_KEY_P);
	MAP_KEY(PS_KEY_Q);
	MAP_KEY(PS_KEY_R);
	MAP_KEY(PS_KEY_S);
	MAP_KEY(PS_KEY_T);
	MAP_KEY(PS_KEY_U);
	MAP_KEY(PS_KEY_V);
	MAP_KEY(PS_KEY_W);
	MAP_KEY(PS_KEY_X);
	MAP_KEY(PS_KEY_Y);
	MAP_KEY(PS_KEY_Z);
	MAP_KEY(PS_KEY_BACKSPACE);
	MAP_KEY(PS_KEY_TAB);
	MAP_KEY(PS_KEY_RETURN);
	MAP_KEY(PS_KEY_LSHIFT);
	MAP_KEY(PS_KEY_RSHIFT);
	MAP_KEY(PS_KEY_CTRL);
	MAP_KEY(PS_KEY_LALT);
	MAP_KEY(PS_KEY_RALT);
	MAP_KEY(PS_KEY_PAUSE);
	MAP_KEY(PS_KEY_CAPSLOCK);
	MAP_KEY(PS_KEY_ESCAPE);
	MAP_KEY(PS_KEY_SPACE);
	MAP_KEY(PS_KEY_PGUP);
	MAP_KEY(PS_KEY_PGDN);
	MAP_KEY(PS_KEY_END);
	MAP_KEY(PS_KEY_HOME);
	MAP_KEY(PS_KEY_UP);
	MAP_KEY(PS_KEY_LEFT);
	MAP_KEY(PS_KEY_DOWN);
	MAP_KEY(PS_KEY_RIGHT);
	MAP_KEY(PS_KEY_PRTSC);
	MAP_KEY(PS_KEY_INSERT);
	MAP_KEY(PS_KEY_DELETE);
	MAP_KEY(PS_KEY_NUMPAD0);
	MAP_KEY(PS_KEY_NUMPAD1);
	MAP_KEY(PS_KEY_NUMPAD2);
	MAP_KEY(PS_KEY_NUMPAD3);
	MAP_KEY(PS_KEY_NUMPAD4);
	MAP_KEY(PS_KEY_NUMPAD5);
	MAP_KEY(PS_KEY_NUMPAD6);
	MAP_KEY(PS_KEY_NUMPAD7);
	MAP_KEY(PS_KEY_NUMPAD8);
	MAP_KEY(PS_KEY_NUMPAD9);
	MAP_KEY(PS_KEY_MULTIPLY);
	MAP_KEY(PS_KEY_ADD);
	MAP_KEY(PS_KEY_SUBTRACT);
	MAP_KEY(PS_KEY_DECIMAL);
	MAP_KEY(PS_KEY_DIVIDE);
	MAP_KEY(PS_KEY_NUMLOCK);
	MAP_KEY(PS_KEY_F1);
	MAP_KEY(PS_KEY_F2);
	MAP_KEY(PS_KEY_F3);
	MAP_KEY(PS_KEY_F4);
	MAP_KEY(PS_KEY_F5);
	MAP_KEY(PS_KEY_F6);
	MAP_KEY(PS_KEY_F7);
	MAP_KEY(PS_KEY_F8);
	MAP_KEY(PS_KEY_F9);
	MAP_KEY(PS_KEY_F10);
	MAP_KEY(PS_KEY_F11);
	MAP_KEY(PS_KEY_F12);
	MAP_KEY(PS_KEY_SCRLK);
	MAP_KEY(PS_KEY_ALPHA1);
	MAP_KEY(PS_KEY_ALPHA2);
	MAP_KEY(PS_KEY_ALPHA3);
	MAP_KEY(PS_KEY_ALPHA4);
	MAP_KEY(PS_KEY_ALPHA5);
	MAP_KEY(PS_KEY_ALPHA6);
	MAP_KEY(PS_KEY_ALPHA7);
	MAP_KEY(PS_KEY_ALPHA8);
	MAP_KEY(PS_KEY_ALPHA9);
	MAP_KEY(PS_KEY_ALPHA0);
	MAP_KEY(PS_KEY_LCTRL);
	MAP_KEY(PS_KEY_RCTRL);

	MAP_KEY(PS_KEY_ALPHAMINUS);
	MAP_KEY(PS_KEY_ALPHAEQUAL);
	MAP_KEY(PS_KEY_SLASH);
	MAP_KEY(PS_KEY_BACKSLASH);
	MAP_KEY(PS_KEY_BACKQUOTE);

	MAP_KEY(PS_KEY_APPS);

	MAP_KEY(PS_KEY_LEFTBRACKET);
	MAP_KEY(PS_KEY_RIGHTBRACKET);
	MAP_KEY(PS_KEY_SEMICOLON);
	MAP_KEY(PS_KEY_APOSTROPHE);
	MAP_KEY(PS_KEY_COMMA);
	MAP_KEY(PS_KEY_PERIOD);

	MAP_KEY(PS_KEY_START);

	// Example: Retrieve the name of a constant
	int keyCode = PS_KEY_A; // Replace this with the constant you want to look up
	if (keyMap.find(number) != keyMap.end()) 
	{
		//PS_LOGGER_INFO("Key Name: " << keyMap[number]);
		PS_LOGGER_INFO(keyMap[number]);
	}
	else 
	{
		PS_LOGGER_INFO("Unknown key.");
	}
}
#endif